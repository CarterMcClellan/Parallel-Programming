# Autotuning System
#
# hello.conf
#
# This configuration file compiles a Hello World program, taking two arguments
# FOO and BAR, which are comletely ignored.
# The programs are compiled with different otimisation levels.
# These are then tested, either for running time (by the system), or for file
# size (using a custom figure of merit).


# The configuration file must contain the following sections:
# [variables], [values], [testing], [scoring], [output] 


[variables]
# Contains a single option: 'variables'
# This lists the variables which will be tuned.
# This can either be a flat list: FOO, BAR, BAZ
# or a nested list, showing independence: {FOO, {BAR1, BAR2}, {BAZ1, BAZ2}}
# This syntax is explained fully in the User's Guide.

#variables = FOO, BAR, OPTLEVEL
variables = {{FOO}, {BAR}, {OPTLEVEL}}



[values]
# Lists the possible values each variable can take, e.g:
# FOO = 1, 2, 3
# BAR = Hello, Welcome, Hi

FOO = 1, 2, 34

BAR = 1, 12

OPTLEVEL = -O0, -O1, -O2, -O3, -Os


[testing]
# Shows how to compile and run the tests.
# Any of the following commands can use %FOO%, %BAR%, etc. as placeholders for 
# the variables named FOO and BAR which are being tuned.
# %%ID%% gives a unique test ID.


# compile (optional, default: none)
# Shell command to compile a test, typically a call to 'make' or similar.

compile = gcc %OPTLEVEL% -o bin/test_%%ID%% hello.c


# test
# Shell command to run a test.

# Use when we want the tuner to time execution
test = ./bin/test_%%ID%% %FOO% %BAR%

# Use when we want to use a custom FOM of the file size
#test = du -b ./bin/test_%%ID%% | cut -f1



# clean (optional, default: none)
# Shell command to clean up (e.g. delete) any unwanted test files.

clean = rm ./bin/test_%%ID%%



[scoring]
# Options for how tests are scored to determine which is best.


# repeat (optional, default: 1, min)
# The number of times a test should be repeated.
# Also specifies how to aggregate the results of repeated tests into one 
# overall score for the test.
# Possible aggregates are: min, max, med, avg.
# If no aggregate is specified, 'min' is used as a default.
# e.g: "repeat = 3, avg" or "repeat = 4" ('min' implied)

repeat = 3, avg


# optimal (optional, default: min_time)
# Whether the highest or lowest score is considered best.
# Can be: min_time, max_time, min, max.
# If the '_time' versions are used, the system times the execution of the 
# 'test' command above and uses that as the score. Otherwise, the score is 
# taken from the last line of output from the 'test' command.

# Use when we want the tuner to time execution
optimal = min_time

# Use when we want to use a custom FOM of the file size
#optimal = min




[output]
# If defined, this is the name of a CSV file which a log of the tests 
# performed will be written to.
# If not defined, no log will be saved.
# This file will be overwritten!

log = results/hello_log.csv
#log = results/hello_size_log.csv


# script (optional)
# If defined, a transcript of the tuning process will be written to this file.
# Only a summary of the tuning will be shown on screen.
# This file will be overwritten!

script = results/hello_script.txt


# importance (optional)
# If defined, this is a log file storing results from some extra tests which 
# will be run. These can be used with the parameter_importance utility to 
# determine which parameters have greatest effect.
# This file will be overwritten!

importance = results/hello_param_importance.csv


